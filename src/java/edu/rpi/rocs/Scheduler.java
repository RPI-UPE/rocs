package edu.rpi.rocs;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.URL;
import java.util.ArrayList;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import java.util.TreeMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.portlet.ActionRequest;
import javax.portlet.ActionResponse;
import javax.portlet.GenericPortlet;
import javax.portlet.PortletConfig;
import javax.portlet.PortletException;
import javax.portlet.PortletRequest;
import javax.portlet.RenderRequest;
import javax.portlet.RenderResponse;

import edu.rpi.rocs.server.objectmodel.SemesterParser;

/**
 * The main Scheduler interface, an instance of JSR-168 Porlet.
 * 
 * @author ewpatton
 *
 */
public class Scheduler extends GenericPortlet {
	
	public static String xmlPath;
	public static ArrayList<String> documents=new ArrayList<String>();
	private static Scheduler theInstance;
	private Map<Integer, Map<?, ?>> userInfoMap=new TreeMap<Integer, Map<?, ?>>();
	private Timer semesterRefreshTimer;
	
	private class ParseXMLFilesTask extends TimerTask {
		public ArrayList<String> parseHTML(String html) {
			ArrayList<String> results=new ArrayList<String>();
			Pattern p = Pattern.compile("[^h]*(href=\"([^\"]*)\")|h[^r]", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
			Matcher m = p.matcher(html);
			while(m.find()) {
				String path = m.group(1);
				if(path!=null) {
					path = path.replaceAll("\"", "");
					path = path.replace("href=", "");
					if(path.endsWith(".xml")) {
						results.add(path);
					}
				}
			}
			return results;
		}
		
		public void run() {
			try {
				URL url = new URL(xmlPath);
				BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
				String data="";
				String inputLine;
				while((inputLine = in.readLine())!= null) {
					data += inputLine;
				}
				in.close();
				
				Scheduler.documents = parseHTML(data);
				for(String file : Scheduler.documents) {
					String newPath = Scheduler.xmlPath + file;
					SemesterParser.parse(newPath);
				}
			}
			catch(Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	public void init(PortletConfig config) throws PortletException {
		super.init(config);
		theInstance = this;
		xmlPath = config.getInitParameter("edu.rpi.rocs.Scheduler.xmlPath");
		long interval = 1000*Long.parseLong(config.getInitParameter("edu.rpi.rocs.Scheduler.refreshInterval"));
		TimerTask taskPerformer = new ParseXMLFilesTask();
		semesterRefreshTimer = new Timer();
		semesterRefreshTimer.scheduleAtFixedRate(taskPerformer, 0, interval);
	}
	
	/**
	 * Processes an action generated by the user.
	 * 
	 * @param aRequest The ActionRequest object from JSR-168 Portal
	 * @param aResponse The ActionResponse object describing render parameters
	 * @throws PortletException
	 */
	public void processAction(ActionRequest aRequest, ActionResponse aResponse)
		throws PortletException {
		/*
		try {
			CASPortletUtils.establishSession(aRequest, this.ptvFactory);
		}
		catch(CASAuthenticationException e) {
			throw new PortletException(e);
		}
		*/
	}
	
	/**
	 * Processes a view render request.
	 * 
	 * @param aRequest The RenderRequest object from JSR-168 Portal
	 * @param aResponse The RenderResponse object describing the rendered content
	 * @throws PortletException
	 * @throws IOException
	 */
	public void doView(RenderRequest aRequest, RenderResponse aResponse)
		throws PortletException, IOException {
		aResponse.setContentType("text/html");
		PrintWriter out = aResponse.getWriter();
		Map<?, ?> userinfo = (Map<?, ?>)aRequest.getAttribute(PortletRequest.USER_INFO);
		if(userinfo == null) {
			out.println("<p>You must be logged in to the portal to use ROCS.</p>");
			return;
		}
		String userName = (String)userinfo.get("user.login.id");
		userInfoMap.put(new Integer(userName.hashCode()), userinfo);
		out.println("<script language=\"javascript\" src=\"" + aRequest.getContextPath() + "/rocs.gwt/rocs.gwt.nocache.js\"></script>");
		out.println("<script language=\"javascript\">var rocsUserName=\""+userName.hashCode()+"\";</script>");
		out.println("<link rel=\"stylesheet\" type=\"text/css\" href=\"" + aRequest.getContextPath() + "/css/rocs.css\"/>");
		out.println("<div id=\"rocs_PORTLET_rocs_root_view\">");
		out.println("</div>");
	}
	
	/**
	 * Processes an edit render request.
	 * 
	 * @param aRequest The RenderRequest object from JSR-168 Portal
	 * @param aResponse The RenderResponse object describing the rendered content
	 * @throws PortletException
	 * @throws IOException
	 */
	public void doEdit(RenderRequest aRequest, RenderResponse aResponse)
		throws PortletException, IOException {
		
	}
	
	/**
	 * Processes a help render request.
	 * 
	 * @param aRequest The RenderRequest object from JSR-168 Portal
	 * @param aResponse The RenderResponse object describing the rendered content
	 * @throws PortletException
	 * @throws IOException
	 */
	public void doHelp(RenderRequest aRequest, RenderResponse aResponse)
		throws PortletException, IOException {
		
	}
	
	public static Scheduler getInstance() {
		return theInstance;
	}

	public Map<?, ?> getUserInfo(String userid) {
		// TODO Auto-generated method stub
		return userInfoMap.get(Integer.valueOf(userid));
	}
	
	protected void finalize() throws Throwable {
		semesterRefreshTimer.cancel();
		super.finalize();
	}
	
	public void destroy() {
		semesterRefreshTimer.cancel();
		super.destroy();
	}
}
